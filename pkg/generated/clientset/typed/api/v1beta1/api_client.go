// Copyright (C) 2025 Crash Override, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the FSF, either version 3 of the License, or (at your option) any later version.
// See the LICENSE file in the root of this repository for full license text or
// visit: <https://www.gnu.org/licenses/gpl-3.0.html>.
// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	http "net/http"

	apiv1beta1 "github.com/crashappsec/ocular/api/v1beta1"
	scheme "github.com/crashappsec/ocular/pkg/generated/clientset/scheme"
	rest "k8s.io/client-go/rest"
)

type ApiV1beta1Interface interface {
	RESTClient() rest.Interface
	CrawlersGetter
	CronSearchesGetter
	DownloadersGetter
	PipelinesGetter
	ProfilesGetter
	SearchesGetter
	UploadersGetter
}

// ApiV1beta1Client is used to interact with features provided by the api group.
type ApiV1beta1Client struct {
	restClient rest.Interface
}

func (c *ApiV1beta1Client) Crawlers(namespace string) CrawlerInterface {
	return newCrawlers(c, namespace)
}

func (c *ApiV1beta1Client) CronSearches(namespace string) CronSearchInterface {
	return newCronSearches(c, namespace)
}

func (c *ApiV1beta1Client) Downloaders(namespace string) DownloaderInterface {
	return newDownloaders(c, namespace)
}

func (c *ApiV1beta1Client) Pipelines(namespace string) PipelineInterface {
	return newPipelines(c, namespace)
}

func (c *ApiV1beta1Client) Profiles(namespace string) ProfileInterface {
	return newProfiles(c, namespace)
}

func (c *ApiV1beta1Client) Searches(namespace string) SearchInterface {
	return newSearches(c, namespace)
}

func (c *ApiV1beta1Client) Uploaders(namespace string) UploaderInterface {
	return newUploaders(c, namespace)
}

// NewForConfig creates a new ApiV1beta1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*ApiV1beta1Client, error) {
	config := *c
	setConfigDefaults(&config)
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new ApiV1beta1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*ApiV1beta1Client, error) {
	config := *c
	setConfigDefaults(&config)
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &ApiV1beta1Client{client}, nil
}

// NewForConfigOrDie creates a new ApiV1beta1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *ApiV1beta1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new ApiV1beta1Client for the given RESTClient.
func New(c rest.Interface) *ApiV1beta1Client {
	return &ApiV1beta1Client{c}
}

func setConfigDefaults(config *rest.Config) {
	gv := apiv1beta1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = rest.CodecFactoryForGeneratedClient(scheme.Scheme, scheme.Codecs).WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *ApiV1beta1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
