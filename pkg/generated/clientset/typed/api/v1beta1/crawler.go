// Copyright (C) 2025 Crash Override, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the FSF, either version 3 of the License, or (at your option) any later version.
// See the LICENSE file in the root of this repository for full license text or
// visit: <https://www.gnu.org/licenses/gpl-3.0.html>.
// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"

	apiv1beta1 "github.com/crashappsec/ocular/api/v1beta1"
	scheme "github.com/crashappsec/ocular/pkg/generated/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// CrawlersGetter has a method to return a CrawlerInterface.
// A group's client should implement this interface.
type CrawlersGetter interface {
	Crawlers(namespace string) CrawlerInterface
}

// CrawlerInterface has methods to work with Crawler resources.
type CrawlerInterface interface {
	Create(ctx context.Context, crawler *apiv1beta1.Crawler, opts v1.CreateOptions) (*apiv1beta1.Crawler, error)
	Update(ctx context.Context, crawler *apiv1beta1.Crawler, opts v1.UpdateOptions) (*apiv1beta1.Crawler, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, crawler *apiv1beta1.Crawler, opts v1.UpdateOptions) (*apiv1beta1.Crawler, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1beta1.Crawler, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1beta1.CrawlerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1beta1.Crawler, err error)
	CrawlerExpansion
}

// crawlers implements CrawlerInterface
type crawlers struct {
	*gentype.ClientWithList[*apiv1beta1.Crawler, *apiv1beta1.CrawlerList]
}

// newCrawlers returns a Crawlers
func newCrawlers(c *ApiV1beta1Client, namespace string) *crawlers {
	return &crawlers{
		gentype.NewClientWithList[*apiv1beta1.Crawler, *apiv1beta1.CrawlerList](
			"crawlers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1beta1.Crawler { return &apiv1beta1.Crawler{} },
			func() *apiv1beta1.CrawlerList { return &apiv1beta1.CrawlerList{} },
		),
	}
}
