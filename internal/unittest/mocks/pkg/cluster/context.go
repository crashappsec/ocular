// Copyright (C) 2025 Crash Override, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the FSF, either version 3 of the License, or (at your option) any later version.
// See the LICENSE file in the root of this repository for full license text or
// visit: <https://www.gnu.org/licenses/gpl-3.0.html>.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/crashappsec/ocular/pkg/cluster (interfaces: ContextManager)
//
// Generated by this command:
//
//	mockgen -destination ../../internal/unittest/mocks/internal/cluster/context.go -package=cluster -typed . ContextManager
//

// Package cluster is a generated GoMock package.
package cluster

import (
	reflect "reflect"

	cluster "github.com/crashappsec/ocular/pkg/cluster"
	gomock "go.uber.org/mock/gomock"
)

// MockContextManager is a mock of ContextManager interface.
type MockContextManager struct {
	ctrl     *gomock.Controller
	recorder *MockContextManagerMockRecorder
	isgomock struct{}
}

// MockContextManagerMockRecorder is the mock recorder for MockContextManager.
type MockContextManagerMockRecorder struct {
	mock *MockContextManager
}

// NewMockContextManager creates a new mock instance.
func NewMockContextManager(ctrl *gomock.Controller) *MockContextManager {
	mock := &MockContextManager{ctrl: ctrl}
	mock.recorder = &MockContextManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextManager) EXPECT() *MockContextManagerMockRecorder {
	return m.recorder
}

// DefaultContext mocks base method.
func (m *MockContextManager) DefaultContext() (cluster.Context, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultContext")
	ret0, _ := ret[0].(cluster.Context)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DefaultContext indicates an expected call of DefaultContext.
func (mr *MockContextManagerMockRecorder) DefaultContext() *MockContextManagerDefaultContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultContext", reflect.TypeOf((*MockContextManager)(nil).DefaultContext))
	return &MockContextManagerDefaultContextCall{Call: call}
}

// MockContextManagerDefaultContextCall wrap *gomock.Call
type MockContextManagerDefaultContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextManagerDefaultContextCall) Return(arg0 cluster.Context, arg1 bool) *MockContextManagerDefaultContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextManagerDefaultContextCall) Do(f func() (cluster.Context, bool)) *MockContextManagerDefaultContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextManagerDefaultContextCall) DoAndReturn(f func() (cluster.Context, bool)) *MockContextManagerDefaultContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContext mocks base method.
func (m *MockContextManager) GetContext(arg0 string) (cluster.Context, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", arg0)
	ret0, _ := ret[0].(cluster.Context)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetContext indicates an expected call of GetContext.
func (mr *MockContextManagerMockRecorder) GetContext(arg0 any) *MockContextManagerGetContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockContextManager)(nil).GetContext), arg0)
	return &MockContextManagerGetContextCall{Call: call}
}

// MockContextManagerGetContextCall wrap *gomock.Call
type MockContextManagerGetContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextManagerGetContextCall) Return(arg0 cluster.Context, arg1 bool) *MockContextManagerGetContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextManagerGetContextCall) Do(f func(string) (cluster.Context, bool)) *MockContextManagerGetContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextManagerGetContextCall) DoAndReturn(f func(string) (cluster.Context, bool)) *MockContextManagerGetContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasContext mocks base method.
func (m *MockContextManager) HasContext(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasContext", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasContext indicates an expected call of HasContext.
func (mr *MockContextManagerMockRecorder) HasContext(arg0 any) *MockContextManagerHasContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasContext", reflect.TypeOf((*MockContextManager)(nil).HasContext), arg0)
	return &MockContextManagerHasContextCall{Call: call}
}

// MockContextManagerHasContextCall wrap *gomock.Call
type MockContextManagerHasContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockContextManagerHasContextCall) Return(arg0 bool) *MockContextManagerHasContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockContextManagerHasContextCall) Do(f func(string) bool) *MockContextManagerHasContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockContextManagerHasContextCall) DoAndReturn(f func(string) bool) *MockContextManagerHasContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
