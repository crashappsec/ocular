// Copyright (C) 2025 Crash Override, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the FSF, either version 3 of the License, or (at your option) any later version.
// See the LICENSE file in the root of this repository for full license text or
// visit: <https://www.gnu.org/licenses/gpl-3.0.html>.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/crashappsec/ocular/pkg/storage (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -destination ../../internal/unittest/mocks/pkg/storage/backend.go -package=storage -typed . Backend
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	storage "github.com/crashappsec/ocular/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend[T storage.Object] struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder[T]
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder[T storage.Object] struct {
	mock *MockBackend[T]
}

// NewMockBackend creates a new mock instance.
func NewMockBackend[T storage.Object](ctrl *gomock.Controller) *MockBackend[T] {
	mock := &MockBackend[T]{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend[T]) EXPECT() *MockBackendMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBackend[T]) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBackendMockRecorder[T]) Delete(ctx, key any) *MockBackendDeleteCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBackend[T])(nil).Delete), ctx, key)
	return &MockBackendDeleteCall[T]{Call: call}
}

// MockBackendDeleteCall wrap *gomock.Call
type MockBackendDeleteCall[T storage.Object] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendDeleteCall[T]) Return(arg0 error) *MockBackendDeleteCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendDeleteCall[T]) Do(f func(context.Context, string) error) *MockBackendDeleteCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendDeleteCall[T]) DoAndReturn(f func(context.Context, string) error) *MockBackendDeleteCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockBackend[T]) Get(ctx context.Context, key string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBackendMockRecorder[T]) Get(ctx, key any) *MockBackendGetCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBackend[T])(nil).Get), ctx, key)
	return &MockBackendGetCall[T]{Call: call}
}

// MockBackendGetCall wrap *gomock.Call
type MockBackendGetCall[T storage.Object] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendGetCall[T]) Return(arg0 T, arg1 error) *MockBackendGetCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendGetCall[T]) Do(f func(context.Context, string) (T, error)) *MockBackendGetCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendGetCall[T]) DoAndReturn(f func(context.Context, string) (T, error)) *MockBackendGetCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockBackend[T]) List(ctx context.Context) (map[string]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBackendMockRecorder[T]) List(ctx any) *MockBackendListCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBackend[T])(nil).List), ctx)
	return &MockBackendListCall[T]{Call: call}
}

// MockBackendListCall wrap *gomock.Call
type MockBackendListCall[T storage.Object] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendListCall[T]) Return(arg0 map[string]T, arg1 error) *MockBackendListCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendListCall[T]) Do(f func(context.Context) (map[string]T, error)) *MockBackendListCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendListCall[T]) DoAndReturn(f func(context.Context) (map[string]T, error)) *MockBackendListCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockBackend[T]) Set(ctx context.Context, key string, value T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockBackendMockRecorder[T]) Set(ctx, key, value any) *MockBackendSetCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBackend[T])(nil).Set), ctx, key, value)
	return &MockBackendSetCall[T]{Call: call}
}

// MockBackendSetCall wrap *gomock.Call
type MockBackendSetCall[T storage.Object] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendSetCall[T]) Return(arg0 error) *MockBackendSetCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendSetCall[T]) Do(f func(context.Context, string, T) error) *MockBackendSetCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendSetCall[T]) DoAndReturn(f func(context.Context, string, T) error) *MockBackendSetCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
