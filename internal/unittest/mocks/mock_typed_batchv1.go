// Copyright (C) 2025 Crash Override, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the FSF, either version 3 of the License, or (at your option) any later version.
// See the LICENSE file in the root of this repository for full license text or
// visit: <https://www.gnu.org/licenses/gpl-3.0.html>.

// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/batch/v1 (interfaces: JobInterface)
//
// Generated by this command:
//
//	mockgen -destination mock_typed_batchv1.go -package=mocks -typed k8s.io/client-go/kubernetes/typed/batch/v1 JobInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/batch/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/batch/v1"
)

// MockJobInterface is a mock of JobInterface interface.
type MockJobInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJobInterfaceMockRecorder
	isgomock struct{}
}

// MockJobInterfaceMockRecorder is the mock recorder for MockJobInterface.
type MockJobInterfaceMockRecorder struct {
	mock *MockJobInterface
}

// NewMockJobInterface creates a new mock instance.
func NewMockJobInterface(ctrl *gomock.Controller) *MockJobInterface {
	mock := &MockJobInterface{ctrl: ctrl}
	mock.recorder = &MockJobInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInterface) EXPECT() *MockJobInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockJobInterface) Apply(ctx context.Context, job *v11.JobApplyConfiguration, opts v10.ApplyOptions) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, job, opts)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockJobInterfaceMockRecorder) Apply(ctx, job, opts any) *MockJobInterfaceApplyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockJobInterface)(nil).Apply), ctx, job, opts)
	return &MockJobInterfaceApplyCall{Call: call}
}

// MockJobInterfaceApplyCall wrap *gomock.Call
type MockJobInterfaceApplyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceApplyCall) Return(result *v1.Job, err error) *MockJobInterfaceApplyCall {
	c.Call = c.Call.Return(result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceApplyCall) Do(f func(context.Context, *v11.JobApplyConfiguration, v10.ApplyOptions) (*v1.Job, error)) *MockJobInterfaceApplyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceApplyCall) DoAndReturn(f func(context.Context, *v11.JobApplyConfiguration, v10.ApplyOptions) (*v1.Job, error)) *MockJobInterfaceApplyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ApplyStatus mocks base method.
func (m *MockJobInterface) ApplyStatus(ctx context.Context, job *v11.JobApplyConfiguration, opts v10.ApplyOptions) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyStatus", ctx, job, opts)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStatus indicates an expected call of ApplyStatus.
func (mr *MockJobInterfaceMockRecorder) ApplyStatus(ctx, job, opts any) *MockJobInterfaceApplyStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStatus", reflect.TypeOf((*MockJobInterface)(nil).ApplyStatus), ctx, job, opts)
	return &MockJobInterfaceApplyStatusCall{Call: call}
}

// MockJobInterfaceApplyStatusCall wrap *gomock.Call
type MockJobInterfaceApplyStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceApplyStatusCall) Return(result *v1.Job, err error) *MockJobInterfaceApplyStatusCall {
	c.Call = c.Call.Return(result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceApplyStatusCall) Do(f func(context.Context, *v11.JobApplyConfiguration, v10.ApplyOptions) (*v1.Job, error)) *MockJobInterfaceApplyStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceApplyStatusCall) DoAndReturn(f func(context.Context, *v11.JobApplyConfiguration, v10.ApplyOptions) (*v1.Job, error)) *MockJobInterfaceApplyStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockJobInterface) Create(ctx context.Context, job *v1.Job, opts v10.CreateOptions) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, job, opts)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockJobInterfaceMockRecorder) Create(ctx, job, opts any) *MockJobInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInterface)(nil).Create), ctx, job, opts)
	return &MockJobInterfaceCreateCall{Call: call}
}

// MockJobInterfaceCreateCall wrap *gomock.Call
type MockJobInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceCreateCall) Return(arg0 *v1.Job, arg1 error) *MockJobInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceCreateCall) Do(f func(context.Context, *v1.Job, v10.CreateOptions) (*v1.Job, error)) *MockJobInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceCreateCall) DoAndReturn(f func(context.Context, *v1.Job, v10.CreateOptions) (*v1.Job, error)) *MockJobInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockJobInterface) Delete(ctx context.Context, name string, opts v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobInterfaceMockRecorder) Delete(ctx, name, opts any) *MockJobInterfaceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobInterface)(nil).Delete), ctx, name, opts)
	return &MockJobInterfaceDeleteCall{Call: call}
}

// MockJobInterfaceDeleteCall wrap *gomock.Call
type MockJobInterfaceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceDeleteCall) Return(arg0 error) *MockJobInterfaceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceDeleteCall) Do(f func(context.Context, string, v10.DeleteOptions) error) *MockJobInterfaceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceDeleteCall) DoAndReturn(f func(context.Context, string, v10.DeleteOptions) error) *MockJobInterfaceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCollection mocks base method.
func (m *MockJobInterface) DeleteCollection(ctx context.Context, opts v10.DeleteOptions, listOpts v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, opts, listOpts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockJobInterfaceMockRecorder) DeleteCollection(ctx, opts, listOpts any) *MockJobInterfaceDeleteCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockJobInterface)(nil).DeleteCollection), ctx, opts, listOpts)
	return &MockJobInterfaceDeleteCollectionCall{Call: call}
}

// MockJobInterfaceDeleteCollectionCall wrap *gomock.Call
type MockJobInterfaceDeleteCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceDeleteCollectionCall) Return(arg0 error) *MockJobInterfaceDeleteCollectionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceDeleteCollectionCall) Do(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockJobInterfaceDeleteCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceDeleteCollectionCall) DoAndReturn(f func(context.Context, v10.DeleteOptions, v10.ListOptions) error) *MockJobInterfaceDeleteCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockJobInterface) Get(ctx context.Context, name string, opts v10.GetOptions) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, opts)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJobInterfaceMockRecorder) Get(ctx, name, opts any) *MockJobInterfaceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJobInterface)(nil).Get), ctx, name, opts)
	return &MockJobInterfaceGetCall{Call: call}
}

// MockJobInterfaceGetCall wrap *gomock.Call
type MockJobInterfaceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceGetCall) Return(arg0 *v1.Job, arg1 error) *MockJobInterfaceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceGetCall) Do(f func(context.Context, string, v10.GetOptions) (*v1.Job, error)) *MockJobInterfaceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceGetCall) DoAndReturn(f func(context.Context, string, v10.GetOptions) (*v1.Job, error)) *MockJobInterfaceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockJobInterface) List(ctx context.Context, opts v10.ListOptions) (*v1.JobList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v1.JobList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockJobInterfaceMockRecorder) List(ctx, opts any) *MockJobInterfaceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJobInterface)(nil).List), ctx, opts)
	return &MockJobInterfaceListCall{Call: call}
}

// MockJobInterfaceListCall wrap *gomock.Call
type MockJobInterfaceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceListCall) Return(arg0 *v1.JobList, arg1 error) *MockJobInterfaceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceListCall) Do(f func(context.Context, v10.ListOptions) (*v1.JobList, error)) *MockJobInterfaceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceListCall) DoAndReturn(f func(context.Context, v10.ListOptions) (*v1.JobList, error)) *MockJobInterfaceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Patch mocks base method.
func (m *MockJobInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v10.PatchOptions, subresources ...string) (*v1.Job, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, pt, data, opts}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockJobInterfaceMockRecorder) Patch(ctx, name, pt, data, opts any, subresources ...any) *MockJobInterfacePatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, pt, data, opts}, subresources...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockJobInterface)(nil).Patch), varargs...)
	return &MockJobInterfacePatchCall{Call: call}
}

// MockJobInterfacePatchCall wrap *gomock.Call
type MockJobInterfacePatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfacePatchCall) Return(result *v1.Job, err error) *MockJobInterfacePatchCall {
	c.Call = c.Call.Return(result, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfacePatchCall) Do(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Job, error)) *MockJobInterfacePatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfacePatchCall) DoAndReturn(f func(context.Context, string, types.PatchType, []byte, v10.PatchOptions, ...string) (*v1.Job, error)) *MockJobInterfacePatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockJobInterface) Update(ctx context.Context, job *v1.Job, opts v10.UpdateOptions) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, job, opts)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockJobInterfaceMockRecorder) Update(ctx, job, opts any) *MockJobInterfaceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobInterface)(nil).Update), ctx, job, opts)
	return &MockJobInterfaceUpdateCall{Call: call}
}

// MockJobInterfaceUpdateCall wrap *gomock.Call
type MockJobInterfaceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceUpdateCall) Return(arg0 *v1.Job, arg1 error) *MockJobInterfaceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceUpdateCall) Do(f func(context.Context, *v1.Job, v10.UpdateOptions) (*v1.Job, error)) *MockJobInterfaceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceUpdateCall) DoAndReturn(f func(context.Context, *v1.Job, v10.UpdateOptions) (*v1.Job, error)) *MockJobInterfaceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateStatus mocks base method.
func (m *MockJobInterface) UpdateStatus(ctx context.Context, job *v1.Job, opts v10.UpdateOptions) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, job, opts)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockJobInterfaceMockRecorder) UpdateStatus(ctx, job, opts any) *MockJobInterfaceUpdateStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockJobInterface)(nil).UpdateStatus), ctx, job, opts)
	return &MockJobInterfaceUpdateStatusCall{Call: call}
}

// MockJobInterfaceUpdateStatusCall wrap *gomock.Call
type MockJobInterfaceUpdateStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceUpdateStatusCall) Return(arg0 *v1.Job, arg1 error) *MockJobInterfaceUpdateStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceUpdateStatusCall) Do(f func(context.Context, *v1.Job, v10.UpdateOptions) (*v1.Job, error)) *MockJobInterfaceUpdateStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceUpdateStatusCall) DoAndReturn(f func(context.Context, *v1.Job, v10.UpdateOptions) (*v1.Job, error)) *MockJobInterfaceUpdateStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockJobInterface) Watch(ctx context.Context, opts v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockJobInterfaceMockRecorder) Watch(ctx, opts any) *MockJobInterfaceWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockJobInterface)(nil).Watch), ctx, opts)
	return &MockJobInterfaceWatchCall{Call: call}
}

// MockJobInterfaceWatchCall wrap *gomock.Call
type MockJobInterfaceWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobInterfaceWatchCall) Return(arg0 watch.Interface, arg1 error) *MockJobInterfaceWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobInterfaceWatchCall) Do(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockJobInterfaceWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobInterfaceWatchCall) DoAndReturn(f func(context.Context, v10.ListOptions) (watch.Interface, error)) *MockJobInterfaceWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
